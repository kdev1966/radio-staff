
services:
  postgres:
    image: postgres:15-alpine
    container_name: radio-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-radiodb}
      POSTGRES_USER: ${POSTGRES_USER:-radio}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-radiopass123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - radio-network
    # Port 5432 NON expose publiquement - acces interne uniquement via le reseau Docker
    # Pour debug local, decommentez temporairement: ports: - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-radio}"]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak:
    build:
      context: ./keycloak
      dockerfile: Dockerfile
    container_name: radio-keycloak
    restart: unless-stopped
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-radiodb}
      KC_DB_USERNAME: ${POSTGRES_USER:-radio}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD:-radiopass123}
      KC_HOSTNAME: 192.168.1.200
      KC_HOSTNAME_PATH: /auth
      KC_HOSTNAME_STRICT: "false"
      KC_HTTP_ENABLED: "true"
      KC_PROXY_HEADERS: xforwarded
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin123}
    # Port 8080 NON expose publiquement - acces uniquement via Nginx sur /auth/
    # Cela force toutes les connexions a passer par le reverse proxy securise
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - radio-network
    volumes:
      - keycloak_data:/opt/keycloak/data
    command: start-dev --import-realm

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: radio-backend
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-radio}:${POSTGRES_PASSWORD:-radiopass123}@postgres:5432/${POSTGRES_DB:-radiodb}?schema=public
      NODE_ENV: production
      PORT: 4000
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: radio-staff
      KEYCLOAK_CLIENT_ID: radio-backend
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET:-secret123}
    # Port 4000 NON expose publiquement - acces uniquement via Nginx sur /api/
    # Cela force toutes les connexions a passer par le reverse proxy securise
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_started
    networks:
      - radio-network

    command: sh -c "npx prisma generate && npx prisma migrate deploy && npm run start:prod"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:4000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: radio-frontend
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: /api
      NEXT_PUBLIC_KEYCLOAK_URL: http://192.168.1.200/auth
      NEXT_PUBLIC_KEYCLOAK_REALM: radio-staff
      NEXT_PUBLIC_KEYCLOAK_CLIENT_ID: radio-frontend
    networks:
      - radio-network
    depends_on:
      - backend

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: radio-nginx
    restart: unless-stopped
    ports:
      - "80:80"      # HTTP - Sera redirige vers HTTPS une fois SSL configure
      - "443:443"    # HTTPS - A activer apres configuration Let's Encrypt
    depends_on:
      - frontend
      - backend
    networks:
      - radio-network
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
      # Volume pour certificats SSL (a activer apres setup-https.sh)
      # - /etc/letsencrypt:/etc/letsencrypt:ro
      # - /var/www/certbot:/var/www/certbot:ro

networks:
  radio-network:
    driver: bridge

volumes:
  postgres_data:
  keycloak_data:
  nginx_logs: